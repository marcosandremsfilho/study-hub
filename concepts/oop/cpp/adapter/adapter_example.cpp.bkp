#include <iostream>
#include <stdlib.h>

using namespace std;

class ReadableString {
	public:
		virtual ~ReadableString() = default;
		virtual string Request() const {
			return "Target: This is Human readable";
		}
};

class UnreadableString {
	public:
		string SpecificRequest() const {
			return "Target: This is unreadable";
		}
};

class StringAdapter : public ReadableString {
	private:
		UnreadableString *unreadablestr_;
	public:
		StringAdapter(UnreadableString *unreadablestr) {
			unreadablestr_ = unreadablestr;
		}
		string Request() const override {
			string corrected = this->unreadablestr_->SpecificRequest();
			return corrected + " | This is Human readable now!";
		}
};

int main(void) {
	ReadableString *readable_string = new ReadableString;
	cout << readable_string->Request() << "\n";

	UnreadableString *unreadable_string = new UnreadableString;
	cout << unreadable_string->SpecificRequest() << "\n";

	StringAdapter *string_adapter = new StringAdapter(unreadable_string);
	cout << string_adapter->Request() << "\n";

	delete readable_string;
	delete unreadable_string;
	delete string_adapter;

	return 0;
}
